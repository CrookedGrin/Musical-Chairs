<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
				 xmlns:s="library://ns.adobe.com/flex/spark"
				 xmlns:mx="library://ns.adobe.com/flex/mx"
				 width="100%"
				 height="100%">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import org.granite.collections.BasicMap;
			
			import spark.collections.Sort;
			
			protected var numCols:int = 10;
			protected var numRows:int = 5;
			protected var slots:Vector.<SeatSlot>;
			protected var seats:Vector.<Seat>;
			protected var seatXRefs:Vector.<SeatXRef>;
			protected var seatTranches:BasicMap;
			protected var students:Vector.<Student>;
			protected var studentTranches:BasicMap;
			protected var studentXRefs:Vector.<StudentXRef>;
			protected var ruleGroups:Vector.<RuleGroup>;
			public var displayContainer:UIComponent;
			
			/**
			 * NOTE: For ease of calculation and simplified storage, seat position will snap to a grid. This makes the concept of adjacency explicit: if a
			 * seat is in a slot that shares an edge or corner, it's adjacent; if not, it's not.  Simple as that.  Coordinates are integer row/column indexes.
			 */
			public function initChart():void {
				createSeats();
				createStudents();
				createRuleGroups();
				createStudentXRefs();
				assignSeats();
				createDisplay();
			}
			
			/**
			 * Iterate through rows and columns and create slots where seats can be placed (empty holes in the grid).
			 */
			protected function createSeats():void {
				slots = new Vector.<SeatSlot>;
				seats = new Vector.<Seat>;
				var slot:SeatSlot;
				var seat:Seat;
				for (var row:uint = 0; row<numRows; row++) {
					for (var col:uint = 0; col<numCols; col++) {
						slot = new SeatSlot();
						seat = new Seat();
						seat.rowIndex = row;
						seat.colIndex = col;
						var y:uint = ((row % numRows) * Seat.SEAT_SIZE);// + sizeModifier/2;
						var x:uint = ((col % numCols) * Seat.SEAT_SIZE);// + sizeModifier/2;
						seat.coords = new Point(x,y);
						seat.id = seats.length;
						seats.push(seat);
					}
				}
			}
			
			/**
			 * Create arbitrary number of Student objects
			 */
			protected function createStudents():void {
				students = new Vector.<Student>;
				for (var i:uint = 0; i < 50; i++) {
					var student:Student = new Student();
					student.id = i;
					student.name = "Student " + i;
					students.push(student);
				}
			}
			
			/**
			 * Create arbitrary sets of Students that should not sit near each other.  In the UI,
			 * these RuleGroups will be implicitly prioritized (as a list).
			 * For M/F alternation, perhaps take whichever gender has fewer students and make that
			 * the lowest priority RuleGroup 
			 */
			protected function createRuleGroups():void {
				ruleGroups = new Vector.<RuleGroup>;
				for (var i:uint = 1; i < 4; ++i) {
					var studentIndex:int = Math.round(Math.random() * (students.length-3));
					var studentA:Student = students[studentIndex];
					var studentB:Student = students[studentIndex+1];
					var studentC:Student = students[studentIndex+2];
					// TODO: weight will be replaced by rule sorting order in UI (implicit, not set by user directly)
					var weight:Number = i;
					var group:RuleGroup = new RuleGroup(i, weight, [studentA, studentB, studentC]);
					ruleGroups.push(group); 
				}
				ruleGroups.sort(ruleGroupSort);
			}
			
			/**
			 * Sorting function for rule groups by weight
			 */
			protected function ruleGroupSort(a:RuleGroup, b:RuleGroup):Number {
				if (a.weight < b.weight)  {
					return -1;
				} else if (a.weight > b.weight) {
					return 1;
				} else {
					return 0;
				}
			}
			
			/**
			 * Iterate through Students and create xRefs between each pair. Each xRef has a "delta" getter
			 * value based on whether the two students are in RuleGroup(s) together, along with the weight of those RuleGroups.
			 * xRefs with the same delta are grouped together in tranches (i.e., within a tranche, there's the same
			 * importance that each of those students are separated from each other).
			 */
			protected function createStudentXRefs():void {
				studentXRefs = new Vector.<StudentXRef>;
				studentTranches = new BasicMap();
				for (var i:uint = 0; i < students.length-1; i++) {
					var startingStudent:Student = students[i] as Student;
					for (var j:uint = i+1; j < students.length; j++) {
						var pairedStudent:Student = students[j] as Student;
						var xRef:StudentXRef = new StudentXRef(startingStudent, pairedStudent);
						var tranche:StudentTranche;
						if (!studentTranches.containsKey(xRef.delta)) {
							tranche = new StudentTranche();
							studentTranches.put(xRef.delta, tranche);
						} else {
							tranche = studentTranches.get(xRef.delta);
						}
						tranche.addItem(xRef);
						studentXRefs.push(xRef);
					}
				}
			}
			

			/**
			 * Apply business rules
			 */
			protected function assignSeats():void {
				var studentTrancheKeys:Array = studentTranches.keySet.toArray();
				studentTrancheKeys.sort(Array.DESCENDING);
				// TODO: Manually-assigned seats will have been placed before this point (upon load, or before user requests new arrangement)
				// starting with the top tranche (students who should be furthest apart), assign 
				// students sequentially to non-adjacent seats:
				// For each tranche:
				// - Get list of already-seated antagonists, if there are any 
				// - Find all antagonist-adjacent seats; remove from pool of available
				// For each un-seated student in that tranche:
				// - Place student in random available seat
				// - Get adjacent to that new seat and remove from pool
				// - Iterate to next, pool shrinking each time
				//   - Handle condition where there aren't any non-adjacent seats; find one that's corner-adjacent to only one, if possible, then degrade gracefully
				
				// Find random non-adjacent seat by elimitating adjacent seats. That means just making sure that seat A
				// chosen is not one of the closest to seat B; in a rectangular seating plan, eliminating the closest 8 seats guarantes at least one seat is 
				// between A and B (5 if one of the seats is along an edge, and only 3 if one is a corner seat.  a seat is on an "edge" if it's got a min/max
				// x or y value; it's a "corner" if it has both. Doesn't really work for odd arrangements like a circle, but fuck off.
				// Note: seat tranches are unnecessary in this case; student tranches are still relevant.
				
				// get initially available seats
				var unoccupied:Vector.<Seat> = seats.concat();
				var occupied:Vector.<Seat> = new Vector.<Seat>;
				//TEST: insert fake manually-placed seats here
				var adjacent:Vector.<Seat> = new Vector.<Seat>;
				for each (var seat:Seat in seats) {
					if (seat.student) {
						occupied.push(seat);
						if (unoccupied.indexOf(seat) > -1) {
							unoccupied.splice(unoccupied.indexOf(seat), 1);
						}
					}
				}
				
				for each (var key:Number in studentTrancheKeys) {
					var tranche:StudentTranche = studentTranches.get(key) as StudentTranche;
					tranche.shuffle();
					placeStudentTranche(tranche, unoccupied.concat());
				}

			}
			
			/**
			 * Search in a  ring around the given seat and return all the seats "touching" it, in order of how easy
			 * it is to make contact with the student in that seat (for example, it's a lot easier to talk to or signal
			 * someone sitting to one side than someone sitting behind and to one side. A bit subjective.)
			 * Some seat arrangement examples:
			 *  ABC     A        ABC
			 *  DEF     B       D   E
			 *  GHI   CDEFG    F     G
			 *  JKL     H       H   I
			 *  MNO     I        JKL 
			 */
			protected function getAdjacentSeats(seat:Seat):Vector.<Seat> {
				var adjSeats:Vector.<Seat> = new Vector.<Seat>;
				// search in a circle around the seat, basically.
				for each (var otherSeat:Seat in seats) {
					if ( ((otherSeat.rowIndex == seat.rowIndex) || (otherSeat.rowIndex == seat.rowIndex+1) || (otherSeat.rowIndex == seat.rowIndex-1)) &&
						((otherSeat.colIndex == seat.colIndex) || (otherSeat.colIndex == seat.colIndex+1) || (otherSeat.colIndex == seat.colIndex-1)) )  {
						adjSeats.push(otherSeat);
					}
				}
				return adjSeats;
			}
						
			protected function placeStudentTranche(tranche:StudentTranche, unoccupied:Vector.<Seat>):void {
				// Take set of unoccupied seats and eliminate those that are ajacent to any occupied by
				// students in this tranche.
				var available:Vector.<Seat> = getAvailableSeats(tranche, unoccupied);
				// With each loop though, the pool of available seats narrows.
				for each (var student:Student in tranche.items) {
					
				}
			}
			
			protected function getAvailableSeats(tranche:StudentTranche, unoccupied:Vector.<Seat>):Vector.<Seat> {
				var available:Vector.<Seat> = new Vector.<Seat>;
				// Iterate through students and add all seats adjacent to occupied seats
				var adjSeats:Vector.<Seat> = new Vector.<Seat>;
				for each (var student:Student in tranche) {
					if (student.seat) {
						adjSeats = adjSeats.concat(getAdjacentSeats(student.seat));
					}
				}
				for each (var seat:Seat in unoccupied) {
					if (adjSeats.indexOf(seat) < 0) {
						// seat is not adjacent to a seat occupied by a student in the given tranche, so include it
						available.push(seat);
					}
				}
				return available;
			}
			

			
			protected function getValidUnoccupiedSeat(student:Student):Seat {
				var seat:Seat;
				// start by just picking a random seat
				var isValid:Boolean = false;
				while (!isValid) {
					var idx:int = Math.round(Math.random() * seats.length); 
					seat = seats[idx];
					isValid = Boolean(seat.student == null);
				}
				return seat;
			}
			

			
// *** Display
			
			protected function createDisplay():void {
				if (!displayContainer) {
					displayContainer = new UIComponent();
				} else {
					cleanupDisplay();
				}
			}
			
			public function updateDisplay():void {
				for each (var seat:Seat in seats) {
					var display:UIComponent = seat.display;
					display.x = seat.coords.x;
					display.y = seat.coords.y;
					displayContainer.addChild(display);
				}
			}
			
			protected function cleanupDisplay():void {
				while (displayContainer.numChildren > 0) {
					displayContainer.removeChildAt(0);
				}
			}
			
			
		]]>
	</fx:Script>
	

</s:Group>
