<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
				 xmlns:s="library://ns.adobe.com/flex/spark"
				 xmlns:mx="library://ns.adobe.com/flex/mx"
				 width="100%"
				 height="100%">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import org.granite.collections.BasicMap;
			
			import spark.collections.Sort;
			
			protected var seats:Vector.<Seat>;
			protected var seatXRefs:Vector.<SeatXRef>;
			protected var seatTranches:BasicMap;
			protected var students:Vector.<Student>;
			protected var studentTranches:BasicMap;
			protected var studentXRefs:Vector.<StudentXRef>;
			protected var ruleGroups:Vector.<RuleGroup>;
			public var displayContainer:UIComponent;
			
			/**
			 * NOTE: For ease of calculation and simplified storage, seat position will snap to a grid. This makes the concept of adjaceny explicit: if a
			 * seat is in a slot that shares an edge or corner, it's adjacent, an if not, it's not.  Simple as that.  Coordinates are integer row/column indexes.
			 */
			public function initChart():void {
				createSeats();
				createSeatXRefs();
				createStudents();
				createRuleGroups();
				createStudentXRefs();
				assignSeats();
				createDisplay();
			}
			
			protected function createSeats():void {
				seats = new Vector.<Seat>;
				var numRows:uint = 10;
				var numCols:uint = 5;
				var seat:Seat;
				for (var row:uint = 0; row<numRows; row++) {
					for (var col:uint = 0; col<numCols; col++) {
						seat = new Seat();
						seat.rowIndex = row;
						seat.colIndex = col;
						var y:uint = ((row % numRows) * Seat.SEAT_SIZE);// + sizeModifier/2;
						var x:uint = ((col % numCols) * Seat.SEAT_SIZE);// + sizeModifier/2;
						seat.coords = new Point(x,y);
						seat.id = seats.length;
						seats.push(seat);
					}
				}
			}
			
			protected function createSeatXRefs():void {
				seatXRefs = new Vector.<SeatXRef>;
				seatTranches = new BasicMap();
				for (var i:uint = 0; i < seats.length-1; i++) {
					var startingSeat:Seat = seats[i] as Seat;
					for (var j:uint = i+1; j < seats.length; j++) {
						var pairedSeat:Seat = seats[j] as Seat;
						var xRef:SeatXRef = new SeatXRef(startingSeat, pairedSeat);
						var Tranche:StudentTranche;
						if (!seatTranches.containsKey(xRef.delta)) {
							Tranche = new StudentTranche();
							seatTranches.put(xRef.delta, Tranche);
						} else {
							Tranche = seatTranches.get(xRef.delta);
						}
						Tranche.addItem(xRef);
						seatXRefs.push(xRef);
					}
				}
//				seatXRefs.sort(seatDeltaSort);
			}
			
			protected function seatDeltaSort(a:SeatXRef, b:SeatXRef):Number {
				if (a.delta < b.delta)  {
					return -1;
				} else if (a.delta > b.delta) {
					return 1;
				} else {
					return 0;
				}
			}
			
			protected function createStudents():void {
				students = new Vector.<Student>;
				for (var i:uint = 0; i < 50; i++) {
					var student:Student = new Student();
					student.id = i;
					student.name = "Student " + i;
					students.push(student);
				}
			}
			
			/**
			 * create n arbitrary sets of Students and group them together.
			 * students in the same set should be kept separated, by default;
			 * rule contains a proximity coefficient that recieves a rank for each pair
			 * of students, as the seat proximity does for seats, except the criteria
			 * here is the rule, not the actual distance. Priority becomes another multiplier
			 * for the coeffient, so the top rule gets a heavier weight. Then the sorted 
			 * coefficients are matched to seats already sorted by proximity, with random
			 * choices filling in gaps.
			 */
			protected function createRuleGroups():void {
				ruleGroups = new Vector.<RuleGroup>;
				for (var i:uint = 1; i < 4; ++i) {
					var studentIndex:int = Math.round(Math.random() * students.length-3);
					var studentA:Student = students[studentIndex];
					var studentB:Student = students[studentIndex+1];
					var studentC:Student = students[studentIndex+2];
					// make weight incrementally a little heavier, so sorting is more likely unique
					// TODO: this should be replicated in UI rule sorting order (implicit, not set by user directly)
					var weight:Number = i * 10;
					var group:RuleGroup = new RuleGroup(i, weight, [studentA, studentB, studentC]);
					ruleGroups.push(group); 
				}
			}
			
			protected function createStudentXRefs():void {
				studentXRefs = new Vector.<StudentXRef>;
				studentTranches = new BasicMap();
				for (var i:uint = 0; i < students.length-1; i++) {
					var startingStudent:Student = students[i] as Student;
					for (var j:uint = i+1; j < students.length; j++) {
						var pairedStudent:Student = students[j] as Student;
						var xRef:StudentXRef = new StudentXRef(startingStudent, pairedStudent);
						var Tranche:StudentTranche;
						if (!studentTranches.containsKey(xRef.delta)) {
							Tranche = new StudentTranche();
							studentTranches.put(xRef.delta, Tranche);
						} else {
							Tranche = studentTranches.get(xRef.delta);
						}
						Tranche.addItem(xRef);
						studentXRefs.push(xRef);
					}
				}
//				studentXRefs.sort(studentDeltaSort);
			}
			
			protected function studentDeltaSort(a:StudentXRef, b:StudentXRef):Number {
				if (a.delta < b.delta)  {
					return -1;
				} else if (a.delta > b.delta) {
					return 1;
				} else {
					return 0;
				}
			}

			/**
			 * Apply business rules
			 */
			protected function assignSeats():void {
				var studentTrancheKeys:Array = studentTranches.keySet.toArray();
				studentTrancheKeys.sort(Array.DESCENDING);
				var seatTrancheKeys:Array = seatTranches.keySet.toArray();
				seatTrancheKeys.sort(Array.DESCENDING);
				// TODO: Manually-assigned seats shall not be included in this collection
				var openSeats:Vector.<Seat>;
				// starting with the top Tranche (students who should be furthest apart), assign 
				// pairs of students to pairs of seats, delta to delta
				// TODO: this would require that seat x-refs be re-calculated after each pair of seat
				// assignments, taking into account occupied seats as they fill up;
				// might be way too inefficient

				// Find n seats (n = students in this Tranchee) that are all above-average delta w/r to each other
				// i.e, if the delta between a given seat and any of the others in the group is not above average,
				// average being the threshold here, reject it and grab the next one
				// if you get through all the seats and can't find one that's above average agaist all the others,
				// need to start combing the dregs
				// some limit needed on number of students
				// better, but expensive, would be to somehow measure all groups of n seats in the available set
				// and keep the one where the cross-delta average is highest, maybe; except in that case, you could have 
				// outliers throw off the average
				// sum rather than average, perhaps? this is where i need math help.
				// also need limits; if n is bigger than available seats, for example, there's trouble, but that
				// shouldn't be possible, since the students are uniquely in one Tranchee or another
				// better: find the one threshold seat xref below which it can't be included; in other words,
				// knowing how many seats we're looking for, and how many xrefs exist corresponding to the number of
				// available seats, should be able to figure out the median xref just by figuring out how many
				// xrefs there are in the group of n seats and getting the xref from the sorted list at the index of
				// that number. that's the threshold. then it's just a matter of iterating through and finding a group
				// of seats that are all above that threshold.  right?
				
				// Seat xrefs are already sorted so all the highest seat-deltas are at the top; therefore, if you take the top 
				// scoop of seat xrefs, none of them will be too small of a delta. Find the max number of xrefs that
				// corresponds to the number of students in the current Tranche; there should only be a certain number of 
				// seats represented by those xrefs, and the studens in the Tranche should be safely assignable to any one
				// of those seats. However, it would need to be a set of n seats that *all* appear in the top seat xrefs
				// in relation to each other.  for example, the top 2 xrefs could easily involve adjacent seats, but the xrefs of
				// thos adjacent seats wouldn't appear in the top area of the xrefs.  the curtoff point for the "best" xrefs should
				// be the index at the max number of possible xrefs between n seats, which is calculable by
				
				// method 3: OK, this might work: grab the first available seat.  This seat has a list of xrefs in which it's a participant.
				// sort *that* list. Grab the opponent in the top seat of the sorted list. fuck, that doesn't work either
				
				// need to find first n seats that, between them, have the highest possible xref deltas; start with method 3 and 
				// the first n canditates based on who's furthest from seat A. then, for each of those candidates, 
				
				// method 4: starting from the top of the xrefs, iterate through and find the first set of n seats where all of them
				// appear in the top-most xrefs.  each seat has a finite number of xrefs in which it participates. at any given point, all
				// available seats each belong to the same number of xrefs. iterate through all the seats and create a set containing only the top 
				// xref from each seat; should end up with half as many unique xrefs in this set as there are seats (i think). From this set, attempt
				// to place the n students in... no. 
				
				// method 5: brute force! for each unique subset of n xrefs (binomial coefficient), calculate standard deviation (sum of differences from mean). for efficiency's
				// sake, first lop off lowest Tranche, iff there are enough xrefs in the remaining Tranches.
				var seatXRefSubsets:Vector.<Vector.<SeatXRef>> = new Vector.<Vector.<SeatXRef>>; // set of sets of xrefs
				var ruleGroup:RuleGroup = ruleGroups[0] as RuleGroup;
				var binom:int = getBinom(seatXRefs.length, ruleGroup.students.length);
				trace("Binomial Coefficient for ruleGroup " + ruleGroup.id + ": " + binom);
				
				// simpler method: we don't really need the maximum distance; we just need them not to be adjacent. That means just making sure that seat A
				// chosen is not one of the closest to seat B; in a rectangular seating plan, eliminating the closest 8 seats guarantes at least one seat is 
				// between A and B (5 if one of the seats is along an edge, and only 3 if one is a corner seat.  a seat is on an "edge" if it's got a min/max
				// x or y value; it's a "corner" if it has both. Doesn't really work for odd arrangements like a circle, but fuck off.
				// Note: seat tranches are unnecessary in this case; student tranches are still relevant.
				for each (var key:Number in studentTrancheKeys) {
					var tranche:StudentTranche = studentTranches.get(key) as StudentTranche;
					tranche.shuffle();
					placeStudents(tranche, seats);
				}

			}
			
			protected function placeStudents(tranche:StudentTranche, availableSeats:Vector.<Seat>):void {
				for each (var student:Student in tranche) {
					// 1. pick a random unoccupied seat that's not adjacent (within adjacency limits as defined by edges/corners) to a seat occupied by another
					// student in this same tranche
					var seat:Seat = getValidUnoccupiedSeat(student);
				}
			}
			
			protected function getValidUnoccupiedSeat(student:Student):Seat {
				var seat:Seat;
				// start by just picking a random seat
				var isValid:Boolean = false;
				while (!isValid) {
					var idx:int = Math.round(Math.random() * seats.length); 
					seat = seats[idx];
					isValid = Boolean(seat.student == null);
				}
				return seat;
			}
			
			/**
			 * Based on whether the given seat is an edge seat, a corner seat, neither, or both (at the end of a single column, for ex),
			 * determine n number of seats that count as "adjacent" to that seat, and grab n seats with the lowest proximity to the given seat.
			 * Some examples:
			 *  ABC     A        ABC
			 *  DEF     B       D   E
			 *  GHI   CDEFG    F     G
			 *  JKL     H       H   I
			 *  MNO     I        JKL 
			 */
			protected function getAdjacentSeats(seat:Seat):Vector.<Seat> {
				var adjSeats:Vector.<Seat> = new Vector.<Seat>;
				// search in a circle around the seat, basically.
				return adjSeats;
			}
			
			/**
			 * 2 seats = 1 xref: (AB)
			 * 3 seats = 3 xrefs (AB, AC, BC)
			 * 4 seats = 6 xrefs (AB, AC, AD, BC, BD, CD)
			 * 5 seats = 10 xrefs (AB, AC, AD, AE, BC, BD, BE, CD, CE, DE)
			 */
			
			/**
			 * Return the binomial coefficient of (n/k), i.e., the number of subsets of length k in superset of length n
			 * http://www.brpreiss.com/books/opus5/html/page460.html
			 */
			protected function getBinom( n:int, k:int ):int {
				var b:Vector.<int> = new Vector.<int>(n+1);
				b[0] = 1;
				for (var i:int = 1; i <= n; ++i) {
					b[i] = 1;
					for (var j:int = i-1; j > 0; --j) {
						b[j] += b[j-1];
					}
				}
				return b[k];
			}
			
// *** Display
			
			protected function createDisplay():void {
				if (!displayContainer) {
					displayContainer = new UIComponent();
				} else {
					cleanupDisplay();
				}
			}
			
			public function updateDisplay():void {
				for each (var seat:Seat in seats) {
					var display:UIComponent = seat.display;
					display.x = seat.coords.x;
					display.y = seat.coords.y;
					displayContainer.addChild(display);
				}
			}
			
			protected function cleanupDisplay():void {
				while (displayContainer.numChildren > 0) {
					displayContainer.removeChildAt(0);
				}
			}
			
			
		]]>
	</fx:Script>
	

</s:Group>
