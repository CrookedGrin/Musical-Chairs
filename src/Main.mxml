<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   minWidth="955" minHeight="600" 
			   initialize="onInitialize(event)" 
			   applicationComplete="onApplicationComplete(event)"
			   >
	
	<fx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			protected var seats:Vector.<Seat>;
			protected var seatXRefs:Vector.<SeatXRef>;
			protected var students:Vector.<Student>;
			
			protected function onInitialize(e:FlexEvent):void {
				
				createSeats();
				createStudents();
			
			}
			
			protected function createSeats():void {
				
				seats = new Vector.<Seat>;
				
				var numRows:uint = 10;
				var numCols:uint = 5;
				var seat:Seat;
				for (var row:uint = 0; row<numRows; row++) {
					for (var col:uint = 0; col<numCols; col++) {
						seat = new Seat();
						var y:uint = ((row % numRows) * Seat.SEAT_SIZE);// + sizeModifier/2;
						var x:uint = ((col % numCols) * Seat.SEAT_SIZE);// + sizeModifier/2;
						seat.coords = new Point(x,y);
						seat.id = seats.length;
						seats.push(seat);
					}
				}
				
				// create XRefs
				seatXRefs = new Vector.<SeatXRef>;
				for (var i:uint = 0; i < seats.length-1; i++) {
					var startingSeat:Seat = seats[i] as Seat;
					for (var j:uint = i+1; j < seats.length; j++) {
						var pairedSeat:Seat = seats[j] as Seat;
						var xRef:SeatXRef = new SeatXRef(startingSeat, pairedSeat);
						seatXRefs.push(xRef);
					}
				}
				seatXRefs.sort(seatDistanceSort);
				
			}
			
			protected function seatDistanceSort(a:SeatXRef, b:SeatXRef):Number {
				if (a.distance < b.distance)  {
					return -1;
				} else if (a.distance > b.distance) {
					return 1;
				} else {
					return 0;
				}
			}
			
			protected function createStudents():void {
				
				students = new Vector.<Student>;
				
				for (var i:uint = 0; i < 50; i++) {
					var student:Student = new Student();
					student.id = i;
					student.name = "Student " + i;
					students.push(student);
				}
			}
			
			protected function onApplicationComplete(e:FlexEvent):void {
				
				var seatContainer:UIComponent = new UIComponent();
				this.addElement(seatContainer);
				
				for each (var seat:Seat in seats) {
					var display:UIComponent = seat.display;
					display.x = seat.coords.x;
					display.y = seat.coords.y;
					seatContainer.addChild(display);
				}
			}
			
		]]>
	</fx:Script>

</s:Application>
