<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   minWidth="955" minHeight="600" 
			   initialize="onInitialize(event)" 
			   applicationComplete="onApplicationComplete(event)"
			   >
	
	<fx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			protected var seats:Vector.<Seat>;
			protected var seatXRefs:Vector.<SeatXRef>;
			protected var students:Vector.<Student>;
			protected var studentXRefs:Vector.<StudentXRef>;
			protected var ruleGroups:Vector.<RuleGroup>
			
			protected function onInitialize(e:FlexEvent):void {
				
				createSeats();
				createSeatXRefs();
				createStudents();
				createRuleGroups();
				createStudentXRefs();
				createRuleGroups();
			
			}
			
			protected function createSeats():void {
				
				seats = new Vector.<Seat>;
				
				var numRows:uint = 10;
				var numCols:uint = 5;
				var seat:Seat;
				for (var row:uint = 0; row<numRows; row++) {
					for (var col:uint = 0; col<numCols; col++) {
						seat = new Seat();
						var y:uint = ((row % numRows) * Seat.SEAT_SIZE);// + sizeModifier/2;
						var x:uint = ((col % numCols) * Seat.SEAT_SIZE);// + sizeModifier/2;
						seat.coords = new Point(x,y);
						seat.id = seats.length;
						seats.push(seat);
					}
				}
				
			}
			
			protected function createSeatXRefs():void {
				
				seatXRefs = new Vector.<SeatXRef>;
				for (var i:uint = 0; i < seats.length-1; i++) {
					var startingSeat:Seat = seats[i] as Seat;
					for (var j:uint = i+1; j < seats.length; j++) {
						var pairedSeat:Seat = seats[j] as Seat;
						var xRef:SeatXRef = new SeatXRef(startingSeat, pairedSeat);
						seatXRefs.push(xRef);
					}
				}
				seatXRefs.sort(seatDeltaSort);
				
			}
			
			protected function seatDeltaSort(a:SeatXRef, b:SeatXRef):Number {
				if (a.delta < b.delta)  {
					return -1;
				} else if (a.delta > b.delta) {
					return 1;
				} else {
					return 0;
				}
			}
			
			protected function createStudents():void {
				
				students = new Vector.<Student>;
				
				for (var i:uint = 0; i < 50; i++) {
					var student:Student = new Student();
					student.id = i;
					student.name = "Student " + i;
					students.push(student);
				}
			}
			
			protected function createRuleGroups():void {
				
				// create n arbitrary sets of Students and group them together.
				// students in the same set should be kept separated, by default;
				// rule contains a proximity coefficient that recieves a rank for each pair
				// of students, as the seat proximity did for seats.  Except the criteria
				// here is the rule, not the actual distance. priority becomes another multiplier
				// for the coeffient, so the top rule gets a heavier weight. Then the sorted 
				// coefficients are matched to seats already sorted by proximity, with random
				// choices filling in gaps.
				
				for (var i:uint = 0; i < 4; ++i) {
					var studentIndex:uint = Math.round(Math.random() * students.length-3);
					var studentA:Student = students[studentIndex];
					var studentB:Student = students[studentIndex+1];
					var studentC:Student = students[studentIndex+2];
				}
			}
			
			protected function createStudentXRefs():void {
				
				studentXRefs = new Vector.<StudentXRef>;
				for (var i:uint = 0; i < students.length-1; i++) {
					var startingStudent:Student = students[i] as Student;
					for (var j:uint = i+1; j < students.length; j++) {
						var pairedStudent:Student = students[j] as Student;
						var xRef:StudentXRef = new StudentXRef(startingStudent, pairedStudent);
						studentXRefs.push(xRef);
					}
				}
				studentXRefs.sort(studentDeltaSort);
			}
			
			protected function studentDeltaSort(a:StudentXRef, b:StudentXRef):Number {

				if (a.delta < b.delta)  {
					return -1;
				} else if (a.delta > b.delta) {
					return 1;
				} else {
					return 0;
				}
			}
			
			
			protected function onApplicationComplete(e:FlexEvent):void {
				
				var seatContainer:UIComponent = new UIComponent();
				this.addElement(seatContainer);
				
				for each (var seat:Seat in seats) {
					var display:UIComponent = seat.display;
					display.x = seat.coords.x;
					display.y = seat.coords.y;
					seatContainer.addChild(display);
				}
			}
			
			

			
		]]>
	</fx:Script>

</s:Application>
